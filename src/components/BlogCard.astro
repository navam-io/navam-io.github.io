---
export interface Props {
  title: string;
  description: string;
  pubDate: Date;
  tags: string[];
  image?: {
    url: string;
    alt: string;
  };
  readingTime?: string;
  slug: string;
  featured?: boolean;
}

const { title, description, pubDate, tags, image, readingTime, slug, featured = false } = Astro.props;

const formattedDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
}).format(pubDate);
---

<article class={`blog-card ${featured ? 'featured' : ''}`}>
  {image && (
    <a href={`/blog/${slug}`} class="blog-image-link">
      <div class="blog-image">
        <img
          src={image.url}
          alt={image.alt}
        />
      </div>
    </a>
  )}
  <div class="blog-content">
    {tags.length > 0 && (
      <span class="blog-tag">
        {tags[0]}
      </span>
    )}
    <h2>
      <a href={`/blog/${slug}`}>
        {title}
      </a>
    </h2>
    <p>{description}</p>
    <div class="blog-meta">
      <time datetime={pubDate.toISOString()} class="blog-date">{formattedDate}</time>
      {readingTime && (
        <span class="blog-reading-time">{readingTime}</span>
      )}
    </div>
  </div>
</article>

<style>
  .blog-card {
    background: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: var(--shadow-sm);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
  }

  .blog-card.featured {
    grid-column: 1 / -1;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0;
  }

  .blog-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  .blog-image-link {
    display: block;
    text-decoration: none;
    position: relative;
    overflow: hidden;
  }

  .blog-image {
    width: 100%;
    aspect-ratio: 16/9;
    overflow: hidden;
    background: var(--gradient-primary);
  }

  .blog-card.featured .blog-image {
    aspect-ratio: auto;
    height: 100%;
  }

  .blog-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .blog-card:hover .blog-image img,
  .blog-image-link:hover .blog-image img {
    transform: scale(1.05);
  }

  .blog-content {
    padding: var(--space-md);
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .blog-tag {
    display: inline-block;
    background: var(--gradient-accent);
    color: var(--color-text-primary);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: var(--space-sm);
    width: fit-content;
  }

  .blog-content h2 {
    font-family: var(--font-display);
    font-size: 1.5rem;
    margin-bottom: var(--space-sm);
    line-height: 1.3;
  }

  .blog-card.featured .blog-content h2 {
    font-size: 2rem;
  }

  .blog-content h2 a {
    color: var(--color-text-primary);
    text-decoration: none;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    display: block;
    padding: 0.25rem 0;
  }

  .blog-content h2 a:hover {
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    transform: translateX(4px);
  }

  .blog-content p {
    color: var(--color-text-secondary);
    line-height: 1.7;
    margin-bottom: var(--space-md);
    flex: 1;
  }

  .blog-meta {
    display: flex;
    gap: var(--space-md);
    font-size: 0.875rem;
    color: var(--color-text-light);
  }

  .blog-date::before {
    content: 'üìÖ ';
  }

  .blog-reading-time::before {
    content: '‚è±Ô∏è ';
  }

  @media (max-width: 768px) {
    .blog-card.featured {
      grid-template-columns: 1fr;
    }

    .blog-card.featured .blog-image {
      aspect-ratio: 16/9;
      height: auto;
    }

    .blog-card.featured .blog-content h2 {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 480px) {
    .blog-content h2 {
      font-size: 1.25rem;
    }

    .blog-card.featured .blog-content h2 {
      font-size: 1.375rem;
    }

    .blog-tag {
      font-size: 0.75rem;
      padding: 0.2rem 0.6rem;
    }
  }
</style>
